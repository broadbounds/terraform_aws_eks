A) We must install and configure Kubectl and AWS CLI on our local machine to create and manage an Amazon EKS cluster

AWS CLI – A command line tool for working with AWS services
kubectl – A command line tool for working with Kubernetes clusters
Required IAM permissions 


1) to install aws cli
 yum install awscli -y
 aws --version
 aws configure
 AWS Access Key ID [None]: GFIAREPKTP32PU78FSB5
 AWS Secret Access Key [None]: Ykloi0EnoZv1sgJOkoSsOesii+utTdiDT+iqsrAw
 Default region name [None]: us-east-1
 Default output format [None]:

2) to install kubectl
 curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
 curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
 echo "$(<kubectl.sha256) kubectl" | sha256sum --check
 sudo install -o root -g root -m 0755 kubectl
 kubectl version --client
 
 # This step is not neccessary if we have AWS CLI version 1.16.156 or later, because we can create kubeconfig instead
 # This old aws-iam-authenticator was used because EKS uses IAM to provide authentication to the kubernetes cluster
3) to install aws-iam-authenticator
 curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
 chmod +x ./aws-iam-authenticator
 mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH
 echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc

 #Verify the installation of aws-iam-authenticator
 aws-iam-authenticator help


# This is how we create kubeconfig if runnung AWS CLI version 1.16.156 or later
4) We must configure our computer to communicate with our cluster

For that, we must create a kubeconfig file for our cluster.
The settings in this file enable the kubectl CLI to communicate with our cluster.
We can automatically create our kubeconfig file with the AWS CLI
By default, the config file is created in ~/.kube/config

 The “aws eks get-token” command is being used to get the token for authentication

aws eks get-token
or
aws eks update-kubeconfig --name my-cluster

aws eks update-kubeconfig --name eks-cluster --role-arn "arn:aws:iam::999999999999:role/eksServiceRole"
Try to manually assume the role through aws-cli.
Verify your current authenticated session: aws sts get-caller-identity
Attempt to assume the role: aws sts assume-role --role-arn "arn:aws:iam::999999999999:role/eksServiceRole" --role-session-name test-eks-role


Then we can test our configuration with the command:

kubectl get svc


